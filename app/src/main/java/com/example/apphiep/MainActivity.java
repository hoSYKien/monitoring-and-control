package com.example.apphiep;import android.graphics.Color;import android.os.Bundle;import android.os.Handler;import android.util.Log;import android.view.View;import android.widget.Button;import android.widget.TextView;import androidx.appcompat.app.AppCompatActivity;import androidx.lifecycle.ViewModelProvider;import com.github.mikephil.charting.charts.LineChart;import com.github.mikephil.charting.components.XAxis;import com.github.mikephil.charting.data.Entry;import com.github.mikephil.charting.data.LineData;import com.github.mikephil.charting.data.LineDataSet;import com.github.mikephil.charting.formatter.ValueFormatter;import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;import org.eclipse.paho.client.mqttv3.MqttCallback;import org.eclipse.paho.client.mqttv3.MqttMessage;import java.util.ArrayList;import java.util.List;public class MainActivity extends AppCompatActivity {    // Vùng hiển thị 2 màn    private View layoutMonitoring, layoutMonitoring2;    private Button btnShowMonitoring, btnShowOther;    private TextView tvHeader;                // header TextView    // Screen 1 views    private TextView txtVoltage1, txtCurrent1, txtPower1, txtFrequency1, txtCosPhi1;    private LineChart chartVoltage1, chartCurrent1, chartPower1, chartFrequency1, chartCosPhi1;    // Screen 2 views    private TextView txtVoltage2, txtCurrent2, txtPower2, txtFrequency2, txtCosPhi2;    private LineChart chartVoltage2, chartCurrent2, chartPower2, chartFrequency2, chartCosPhi2;    private MqttHandler mqttHandler;    private Handler handler = new Handler();    private int dataIndex1 = 0;    private int dataIndex2 = 0;    // Colors    private final int voltageColor   = Color.parseColor("#3F51B5");    private final int currentColor   = Color.parseColor("#FF5722");    private final int powerColor     = Color.parseColor("#4CAF50");    private final int frequencyColor = Color.parseColor("#9C27B0");    private final int cosPhiColor    = Color.parseColor("#607D8B");    private final int activeBgColor  = Color.parseColor("#6200EE");    private final int activeTextColor= Color.WHITE;    private final int inactiveTextColor = activeBgColor;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        // header        tvHeader = findViewById(R.id.tvHeader);        // setup screens        layoutMonitoring  = findViewById(R.id.layoutMonitoring);        layoutMonitoring2 = findViewById(R.id.layoutMonitoring2);        btnShowMonitoring = findViewById(R.id.btnShowMonitoring);        btnShowOther      = findViewById(R.id.btnShowOther);        // default show screen1        layoutMonitoring.setVisibility(View.VISIBLE);        layoutMonitoring2.setVisibility(View.GONE);        tvHeader.setText("GIÁM SÁT 1");        styleActiveButton(btnShowMonitoring, btnShowOther);        btnShowMonitoring.setOnClickListener(v -> {            layoutMonitoring.setVisibility(View.VISIBLE);            layoutMonitoring2.setVisibility(View.GONE);            tvHeader.setText("GIÁM SÁT 1");            styleActiveButton(btnShowMonitoring, btnShowOther);        });        btnShowOther.setOnClickListener(v -> {            layoutMonitoring.setVisibility(View.GONE);            layoutMonitoring2.setVisibility(View.VISIBLE);            tvHeader.setText("GIÁM SÁT 2");            styleActiveButton(btnShowOther, btnShowMonitoring);        });        // find screen1 views        txtVoltage1   = findViewById(R.id.txtVoltage);        txtCurrent1   = findViewById(R.id.txtCurrent);        txtPower1     = findViewById(R.id.txtPower);        txtFrequency1 = findViewById(R.id.txtFrequency);        txtCosPhi1    = findViewById(R.id.txtCosPhi);        chartVoltage1   = findViewById(R.id.chartVoltage);        chartCurrent1   = findViewById(R.id.chartCurrent);        chartPower1     = findViewById(R.id.chartPower);        chartFrequency1 = findViewById(R.id.chartFrequency);        chartCosPhi1    = findViewById(R.id.chartCosPhi);        // find screen2 views        txtVoltage2   = findViewById(R.id.txtVoltage2);        txtCurrent2   = findViewById(R.id.txtCurrent2);        txtPower2     = findViewById(R.id.txtPower2);        txtFrequency2 = findViewById(R.id.txtFrequency2);        txtCosPhi2    = findViewById(R.id.txtCosPhi2);        chartVoltage2   = findViewById(R.id.chartVoltage2);        chartCurrent2   = findViewById(R.id.chartCurrent2);        chartPower2     = findViewById(R.id.chartPower2);        chartFrequency2 = findViewById(R.id.chartFrequency2);        chartCosPhi2    = findViewById(R.id.chartCosPhi2);        // setup all charts        setupChart(chartVoltage1, voltageColor, 215f, 225f);        setupChart(chartCurrent1, currentColor, 0f, 1f);        setupChart(chartPower1,   powerColor,   40f, 120f);        setupChart(chartFrequency1, frequencyColor, 47f, 52f);        setupChart(chartCosPhi1,  cosPhiColor,  88f, 96f);        setupChart(chartVoltage2, voltageColor, 215f, 225f);        setupChart(chartCurrent2, currentColor, 0f, 1f);        setupChart(chartPower2,   powerColor,   40f, 120f);        setupChart(chartFrequency2, frequencyColor, 47f, 52f);        setupChart(chartCosPhi2,  cosPhiColor,  88f, 96f);        // MQTT        MqttViewModel vm = new ViewModelProvider(this).get(MqttViewModel.class);        mqttHandler = vm.getMqttHandler(this);        mqttHandler.setCallback(new MqttCallback() {            @Override public void connectionLost(Throwable cause) {}            @Override public void messageArrived(String topic, MqttMessage message) {                String msg = new String(message.getPayload());                Log.i("MQTT", "→  5-n topic=" + topic + " payload=\"" + msg + "\"");                if (topic.equals("esp8266/pzem1")) {                    updateScreen(msg, 1);                } else if (topic.equals("esp8266/pzem2")) {                    updateScreen(msg, 2);                }            }            @Override public void deliveryComplete(IMqttDeliveryToken token) {}        });        mqttHandler.subscribe("esp8266/pzem1");        mqttHandler.subscribe("esp8266/pzem2");    }    private void updateScreen(String msg, int screen) {        Log.i("UPDATE", "updateScreen(screen=" + screen + "): raw msg=\"" + msg + "\"");        String[] parts = msg.trim().split("\\s+");        Log.i("UPDATE", " parts.length=" + parts.length);        if (parts.length < 5) return;        try {            float v = Float.parseFloat(parts[0]);            float c = Float.parseFloat(parts[1]);            float p = Float.parseFloat(parts[2]);            float e = Float.parseFloat(parts[3]); // energy not used in chart            float f = Float.parseFloat(parts[4]);            handler.post(() -> {                if (screen == 1) {                    txtVoltage1.setText("Điện áp: " + v + " V");                    txtCurrent1.setText("Dòng: " + c + " A");                    txtPower1.setText("Công suất: " + p + " W");                    txtFrequency1.setText("Tần số: " + f + " Hz");                    txtCosPhi1.setText("Cosφ: " + e);                    appendEntry(chartVoltage1, v, voltageColor, 1);                    appendEntry(chartCurrent1, c, currentColor, 1);                    appendEntry(chartPower1,   p, powerColor,   1);                    appendEntry(chartFrequency1, f, frequencyColor, 1);                    appendEntry(chartCosPhi1,   e, cosPhiColor, 1);                } else {                    txtVoltage2.setText("Điện áp: " + v + " V");                    txtCurrent2.setText("Dòng: " + c + " A");                    txtPower2.setText("Công suất: " + p + " W");                    txtFrequency2.setText("Tần số: " + f + " Hz");                    txtCosPhi2.setText("Cosφ: " + e);                    appendEntry(chartVoltage2, v, voltageColor, 2);                    appendEntry(chartCurrent2, c, currentColor, 2);                    appendEntry(chartPower2,   p, powerColor,   2);                    appendEntry(chartFrequency2, f, frequencyColor, 2);                    appendEntry(chartCosPhi2,   e, cosPhiColor, 2);                }            });        } catch (NumberFormatException ignored) {}    }    private void appendEntry(LineChart chart, float value, int color, int screen) {        List<Entry> entries = (screen == 1)                ? ((LineDataSet)chart.getData().getDataSetByIndex(0)).getValues()                : ((LineDataSet)chart.getData().getDataSetByIndex(0)).getValues();        int idx = (screen==1? ++dataIndex1 : ++dataIndex2);        entries.add(new Entry(idx, value));        if (entries.size() > 20) entries.remove(0);        LineDataSet set = new LineDataSet(entries, "");        set.setColor(color);        set.setLineWidth(2f);        set.setDrawCircles(true);        set.setCircleColor(color);        set.setCircleRadius(3f);        set.setDrawCircleHole(false);        set.setDrawValues(false);        chart.setData(new LineData(set));        chart.invalidate();    }    private void styleActiveButton(Button active, Button inactive) {        active.setBackgroundColor(activeBgColor);        active.setTextColor(activeTextColor);        inactive.setBackgroundColor(Color.TRANSPARENT);        inactive.setTextColor(inactiveTextColor);    }    private void setupChart(LineChart chart, int color, float minY, float maxY) {        chart.getDescription().setEnabled(false);        chart.getXAxis().setPosition(XAxis.XAxisPosition.BOTTOM);        chart.getAxisRight().setEnabled(false);        chart.setTouchEnabled(false);        chart.setDragEnabled(false);        chart.setScaleEnabled(false);        LineDataSet empty = new LineDataSet(new ArrayList<>(), "");        empty.setColor(color);        empty.setLineWidth(2f);        empty.setDrawCircles(true);        empty.setCircleColor(color);        empty.setCircleRadius(5f);        empty.setDrawCircleHole(false);        empty.setDrawValues(false);        chart.setData(new LineData(empty));        chart.getAxisLeft().setGranularity(1f);        chart.getAxisLeft().setLabelCount(5, true);        chart.getAxisLeft().setValueFormatter(new ValueFormatter() {            @Override public String getFormattedValue(float value) {                return String.format("%d", (int)value);            }        });        chart.getAxisLeft().setAxisMinimum(minY);        chart.getAxisLeft().setAxisMaximum(maxY);    }}